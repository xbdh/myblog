<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode | 细胞的核</title>
    <link>/categories/leetcode/</link>
      <atom:link href="/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <description>leetcode</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 15 Sep 2020 21:50:27 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>leetcode</title>
      <link>/categories/leetcode/</link>
    </image>
    
    <item>
      <title>Leetcode</title>
      <link>/code/leetcode/</link>
      <pubDate>Tue, 15 Sep 2020 21:50:27 +0800</pubDate>
      <guid>/code/leetcode/</guid>
      <description>

&lt;h2 id=&#34;一-数组-链表-跳表&#34;&gt;一. 数组、链表、跳表&lt;/h2&gt;

&lt;h3 id=&#34;11-盛最多水的容器&#34;&gt;11. 盛最多水的容器&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;给你 n 个非负整数 a1，a2，&amp;hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;/p&gt;

&lt;p&gt;说明：你不能倾斜容器，且 n 的值至少为 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/container-with-most-water/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/container-with-most-water/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;输入：[1,8,6,2,5,4,8,3,7]
输出：49
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int maxArea(vector&amp;lt;int&amp;gt; &amp;amp;height) {
    int start = 0;
    int end = height.size() - 1;
    int maxArea = INT_MIN;

    while (start &amp;lt; end) {
        int temp = (end - start) * min(height[end], height[start]);
        maxArea = max(maxArea, temp);
        if (height[start] &amp;lt; height[end]) {
            start++;
        } else {
            end--
        }
    }
    return maxArea;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;283-移动零&#34;&gt;283. 移动零&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/move-zeroes/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/move-zeroes/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;输入: [0,1,0,3,12]
输出: [1,3,12,0,0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void moveZeroes(vector&amp;lt;int&amp;gt; &amp;amp;nums) {
    // 最后的非零值的索引
    int lastNonZeroFoundAt = 0;
    for (int  cur = 0; cur &amp;lt; nums.size(); cur++) {
        if (nums[cur] != 0) {
            swap(nums[lastNonZeroFoundAt++], nums[cur]);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;70-爬楼梯&#34;&gt;70. 爬楼梯&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/climbing-stairs/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/climbing-stairs/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;假设你正在爬楼梯。需要 n 阶你才能到达楼顶。&lt;/p&gt;

&lt;p&gt;每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p&gt;

&lt;p&gt;注意：给定 n 是一个正整数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。

1.  1 阶 + 1 阶
2.  2 阶
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。

1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int climbStairs(int n) {
    if (n &amp;lt;= 2) {
        return n;

    }
    int i1 = 1;
    int i2 = 2;
    for (int i = 2; i &amp;lt; n; i++) {
        int temp = i1 + i2;
        i1 = i2;
        i2 = temp;
    }

    return i2;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
