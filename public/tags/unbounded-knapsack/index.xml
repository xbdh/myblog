<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unbounded Knapsack | 细胞的核</title>
    <link>/tags/unbounded-knapsack/</link>
      <atom:link href="/tags/unbounded-knapsack/index.xml" rel="self" type="application/rss+xml" />
    <description>Unbounded Knapsack</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 01 Jul 2020 16:34:12 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Unbounded Knapsack</title>
      <link>/tags/unbounded-knapsack/</link>
    </image>
    
    <item>
      <title>Dynamic Programming-3 Unbounded Knapsack</title>
      <link>/code/dynamic-progamming/3-unbounded-knapsack/</link>
      <pubDate>Wed, 01 Jul 2020 16:34:12 +0800</pubDate>
      <guid>/code/dynamic-progamming/3-unbounded-knapsack/</guid>
      <description>

&lt;h2 id=&#34;1-unbounded-knapsack&#34;&gt;1. unbounded knapsack&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;给定N个物品的价值和重量，一个容量为C的背包。每个物品不限次数且总容量不能超过C，求最大价值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	weights=[1, 2, 3]
    	profits=[15, 20, 50]
    	C=5
    
output:	80
  
explanations:	2*15+50=80
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	weights=[1, 3, 4, 5]
    	profits=[15, 50, 60, 90]
    	C=8
    
output:	140
  
explanations:	50+90=140
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brute-force&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int knapsackRecursive(const vector&amp;lt;int&amp;gt; &amp;amp;weight, const vector&amp;lt;int&amp;gt; &amp;amp;profits, int capacity, int currentIndex) {
    if (capacity &amp;lt;= 0 || currentIndex &amp;gt;= weight.size() || weight.size() != profits.size()) {
        return 0;
    }

    int profit1 = 0;
    //选中之后，currentIndex不增加
    if (weight[currentIndex] &amp;lt;= capacity) {
        profit1 = profits[currentIndex] +
                  knapsackRecursive(weight, profits, capacity - weight[currentIndex], currentIndex );
    }

    int profit2 = knapsackRecursive(weight, profits, capacity, currentIndex + 1);

    return max(profit1, profit2);
}

int knapsack(const vector&amp;lt;int&amp;gt; &amp;amp;weight, const vector&amp;lt;int&amp;gt; &amp;amp;profits, int capacity) {
    return knapsackRecursive(weight, profits, capacity, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;2^(N+C)&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + C&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;top-down&#34;&gt;Top-down&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int knapsackRecursive2(const vector&amp;lt;int&amp;gt; &amp;amp;weight, const vector&amp;lt;int&amp;gt; &amp;amp;profits, int capacity, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;dp,
                      int currentIndex) {
    if (capacity &amp;lt;= 0 || currentIndex &amp;gt;= weight.size()) {
        return 0;
    }

    if (dp[currentIndex][capacity] != -1) {
        return dp[currentIndex][capacity];
    }


    int profit1 = 0;

    if (weight[currentIndex] &amp;lt;= capacity) {
        profit1 = profits[currentIndex] +
                  knapsackRecursive2(weight, profits, capacity - weight[currentIndex], dp, currentIndex );
    }

    int profit2 = knapsackRecursive2(weight, profits, capacity, dp, currentIndex + 1);
    dp[currentIndex][capacity] = max(profit1, profit2);

    return dp[currentIndex][capacity];
}

int knapsack2(const vector&amp;lt;int&amp;gt; &amp;amp;weight, const vector&amp;lt;int&amp;gt; &amp;amp;profits, int capacity) {
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(weight.size(), vector&amp;lt;int&amp;gt;(capacity + 1, -1));
    return knapsackRecursive2(weight, profits, capacity, dp, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + C&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + C&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;./1-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int knapsack3(const vector&amp;lt;int&amp;gt; &amp;amp;weight, const vector&amp;lt;int&amp;gt; &amp;amp;profits, int capacity) {
    if (capacity &amp;lt;= 0 || profits.empty() || profits.size() != weight.size()) {
        return 0;
    }

    int n = profits.size();
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(n, vector&amp;lt;int&amp;gt;(capacity + 1));

    for (int i = 0; i &amp;lt; n; i++) {
        dp[i][0] = 0;
    }
    //如果第一个物品小于物品重量，放置,可以重复拿
    for (int j = 0; j &amp;lt;= capacity; j++) {
        if (weight[0] &amp;lt;= j) {
            dp[0][j] = profits[0]+dp[0][j-weight[0]];
        }
    }

    for (int i = 1; i &amp;lt; n; i++) {
        for (int c = 1; c &amp;lt;= capacity; c++) {
            int profit1 = 0, profit2 = 0;

            if (weight[i] &amp;lt;= c) {
                profit1 = profits[i] + dp[i][c - weight[i]];
            }
            profit2 = dp[i - 1][c];

            dp[i][c] = max(profit1, profit2);
        }
    }

    return dp[n - 1][capacity];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + C&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + C&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./1-13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;selected-item&#34;&gt;selected item&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//有选中的项目，有具体选了几次
void printSelectElements(const vector&amp;lt;int&amp;gt; &amp;amp;weight, const vector&amp;lt;int&amp;gt; &amp;amp;profits, int capacity, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;dp) {
    int n = weight.size();
    int totalProfit = dp[n - 1][capacity];
    cout &amp;lt;&amp;lt; &amp;quot;--------&amp;quot;&amp;lt;&amp;lt;endl;
    //不能等于0，会越界
    
    //选中，下一次同行
    //未选中，上一行
    int row=n-1;
    while(row&amp;gt;0){
        if (totalProfit != dp[row - 1][capacity]) {

            cout &amp;lt;&amp;lt; weight[row] &amp;lt;&amp;lt; &amp;quot;  &amp;quot;;
            cout &amp;lt;&amp;lt; &amp;quot;index=&amp;quot; &amp;lt;&amp;lt; row &amp;lt;&amp;lt; &amp;quot; &amp;quot;&amp;lt;&amp;lt;endl;
            capacity -= weight[row];
            totalProfit -= profits[row];
        }else{
            row--;
        }
    }

    //判断第一个元素是否被选中,这个时候跳出来循环，第一个元素不止选了一次
    while(totalProfit != 0) {
        cout &amp;lt;&amp;lt; weight[0]&amp;lt;&amp;lt;&amp;quot;  &amp;quot;;
        totalProfit-=profits[0];
        cout &amp;lt;&amp;lt; &amp;quot;index=&amp;quot; &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; &amp;quot;  &amp;quot;&amp;lt;&amp;lt;endl;
    }
    cout &amp;lt;&amp;lt; &amp;quot;--------&amp;quot;&amp;lt;&amp;lt;endl;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./1-14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-rod-cutting&#34;&gt;2. rod cutting&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;给定长度为N的杆，切成小段，不同长度有不同的价格，求最大收益&lt;/p&gt;

&lt;p&gt;同上题1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	lengths= [1, 2, 3, 4, 5]
    	prices= [2, 6, 7, 10, 13]
        N=5
    
output:	14
    
explanations:2*(length=2)+1*(length=1)=14
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bottom-up-1&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;./2-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int knapsack(const vector&amp;lt;int&amp;gt; &amp;amp;lengths, const vector&amp;lt;int&amp;gt; &amp;amp;prices, int rodLength) {
    if (rodLength &amp;lt;= 0 || prices.empty() || prices.size() != lengths.size()) {
        return 0;
    }

    int n = prices.size();
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(n, vector&amp;lt;int&amp;gt;(rodLength + 1));

    for (int i = 0; i &amp;lt; n; i++) {
        dp[i][0] = 0;
    }
    //如果第一个物品小于物品重量，放置,可以重复拿
    for (int j = 0; j &amp;lt;= rodLength; j++) {
        if (lengths[0] &amp;lt;= j) {
            dp[0][j] = prices[0]+dp[0][j-lengths[0]];
        }
    }

    for (int i = 1; i &amp;lt; n; i++) {
        for (int r = 1; r &amp;lt;= rodLength; r++) {
            int profit1 = 0, profit2 = 0;

            if (lengths[i] &amp;lt;= r) {
                profit1 = prices[i] + dp[i][r - lengths[i]];
            }
            profit2 = dp[i - 1][r];

            dp[i][r] = max(profit1, profit2);
        }
    }

    return dp[n - 1][rodLength];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + C&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + C&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./2-11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;selected-item-1&#34;&gt;selected item&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;./2-12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-coin-change&#34;&gt;3. coin change&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;无限量不同面值的零钱和要换的钱N，求有多少种换钱的方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input: [1, 2, 3] , amount=5
  
output:	5
    
explanation:{1,1,1,1,1},{1,1,1,2},{1,2,2},{1,1,3},{2,3}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brute-force-1&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int coinChangeRecursive(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total, int currentIndex) {
    //空集为一种
    if (total == 0) {
        return 1;
    }
    if (currentIndex &amp;gt;= nums.size()) {
        return 0;
    }

    int part1 = 0, part2 = 0;
    if (nums[currentIndex] &amp;lt;= total) {
        part1 = coinChangeRecursive(nums, total - nums[currentIndex], currentIndex);
    }
    part2 = coinChangeRecursive(nums, total, currentIndex + 1);

    return part1 + part2;
}

int coinChange(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total) {
    if (nums.empty()) {
        return 0;
    }
    return coinChangeRecursive(nums, total, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;2^(N+T)&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + T&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;top-down-1&#34;&gt;Top-down&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int coinChangeRecursive2(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total, int currentIndex, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp) {
    if (total == 0) {
        return 1;
    }
    if (currentIndex &amp;gt;= nums.size()) {
        return 0;
    }

    if (dp[currentIndex][total] == -1) {
        int part1 = 0, part2 = 0;
        if (nums[currentIndex] &amp;lt;= total) {
            part1 = coinChangeRecursive2(nums, total - nums[currentIndex], currentIndex, dp);
        }
        part2 = coinChangeRecursive2(nums, total, currentIndex + 1, dp);
        dp[currentIndex][total] = part1 + part2;
    }


    return dp[currentIndex][total];
}

int coinChange2(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total) {
    if (nums.empty()) {
        return 0;
    }
    int n = nums.size();
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(n, vector&amp;lt;int&amp;gt;(total + 1, -1));
    return coinChangeRecursive2(nums, total, 0, dp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up-2&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;./3-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int coinChange3(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total) {
    if (nums.empty()) {
        return 0;
    }
    int n = nums.size();
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(n, vector&amp;lt;int&amp;gt;(total + 1));

    //第一列，空集算一种
    for (int i = 0; i &amp;lt; n; i++) {
        dp[i][0] = 1;
    }

    //只有nums[0]一个元素,当t整除nums[0]时，一种
    for (int t = 1; t &amp;lt;= total; t++) {
        dp[0][t] = (t % nums[0] == 0 ? 1 : 0);
    }

    for (int i = 1; i &amp;lt; n; i++) {
        for (int t = 1; t &amp;lt;= total; t++) {
            dp[i][t] = dp[i - 1][t];
            if (nums[i] &amp;lt;= t) {
                dp[i][t] = dp[i][t] + dp[i][t - nums[i]];
            }
        }
    }

    return dp[n - 1][total];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./3-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./3-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./3-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./3-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./3-6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./3-7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-minimum-coin-change&#34;&gt;4. minimum coin change&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;无限量不同面值的硬币和要换的总钱N，求硬币总数最小值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input: [1, 2, 3] , amount=5
  
output:	2
    
explanation:{2,3}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input: [1, 2, 3] , amount=11
  
output:	4
    
explanation:{2,3,3,3}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brute-force-2&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int countCoinChangeRecursive(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total, int currentIndex) {
    if (total == 0) {
        return 0;
    }
    if (currentIndex &amp;gt;= nums.size()) {
        return -1;
    }

    int count1 = INT_MAX;
    if (nums[currentIndex] &amp;lt;= total) {
        if (INT_MAX != countCoinChangeRecursive(nums, total - nums[currentIndex], currentIndex)) {
            count1 = 1 + countCoinChangeRecursive(nums, total - nums[currentIndex], currentIndex);
        }
    }
    int count2 = countCoinChangeRecursive(nums, total, currentIndex + 1);

    return min(count1, count2);
}

int countCoinChange(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total) {
    if (nums.empty()) {
        return INT_MAX;
    }
    int result = countCoinChangeRecursive(nums, total, 0);
    return result == INT_MAX ? -1 : result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;2^(N+T)&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + T&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;top-down-2&#34;&gt;Top-down&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int countCoinChangeRecursive2(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total, int currentIndex, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp) {
    if (total == 0) {
        return 0;
    }
    if (currentIndex &amp;gt;= nums.size()) {
        return INT_MAX;
    }

    if (dp[currentIndex][total] != INT_MAX) {
        int count1 = INT_MAX;
        if (nums[currentIndex] &amp;lt;= total) {
            if (INT_MAX != countCoinChangeRecursive2(nums, total - nums[currentIndex], currentIndex, dp)) {
                count1 = 1 + countCoinChangeRecursive2(nums, total - nums[currentIndex], currentIndex, dp);
            }
        }
        int count2 = countCoinChangeRecursive2(nums, total, currentIndex + 1, dp);
        dp[currentIndex][total] = min(count1, count2);
    }


    return dp[currentIndex][total];
}

int countCoinChange2(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total) {
    if (nums.empty()) {
        return -1;
    }

    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(nums.size(), vector&amp;lt;int&amp;gt;(total + 1, INT_MAX));
    int result = countCoinChangeRecursive(nums, total, 0);
    return result == INT_MAX ? -1 : result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up-3&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;./4-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int countCoinChange3(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total) {
    if (nums.empty()) {
        return -1;
    }
    if (total == 0) {
        return 0;
    }
    int n = nums.size();
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(n, vector&amp;lt;int&amp;gt;(total + 1));

    for (int i = 0; i &amp;lt; n; i++) {
        dp[i][0] = 0;
    }
    //只有nums[0]时，最小个数为t/nums[0];
    for (int t = 1; t &amp;lt;= total; t++) {
        dp[0][t] = (t % nums[0] == 0 ? t / nums[0] : INT_MAX);
    }

    for (int i = 1; i &amp;lt; n; i++) {
        for (int t = 1; t &amp;lt;= total; t++) {
            dp[i][t] = dp[i - 1][t];
            //选中
            if (nums[i] &amp;lt;= t) {
                if (dp[i][t - nums[i]] != INT_MAX) {
                    dp[i][t] = min(dp[i - 1][t], 1 + dp[i][t - nums[i]]);
                }
            }

        }
    }

    return (dp[n - 1][total] == INT_MAX) ? -1 : dp[n - 1][total];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./4-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./4-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./4-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./4-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./4-6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./4-7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./4-8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-maximum-ribbon-cut&#34;&gt;5. maximum ribbon cut&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;相当于：无限量不同面值的硬币和要换的总钱N，求硬币总数最大值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	[2,3,5] ,total=5
    
output:	2
    
explanation: {2,3}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	[2,3] ,total=7
    
output:	3
    
explanation: {2,2,3}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	[3, 5,7] ,total=13
    
output:	3
    
explanation: {3,3,7}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brute-force-3&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int countCoinChangeRecursive(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total, int currentIndex) {
    if (total == 0) {
        return 0;
    }
    if (currentIndex &amp;gt;= nums.size()) {
        return INT_MIN;
    }

    int count1 = INT_MIN;
    if (nums[currentIndex] &amp;lt;= total) {
        if (INT_MIN != countCoinChangeRecursive(nums, total - nums[currentIndex], currentIndex)) {
            count1 = 1 + countCoinChangeRecursive(nums, total - nums[currentIndex], currentIndex);
        }
    }
    int count2 = countCoinChangeRecursive(nums, total, currentIndex + 1);

    return max(count1, count2);
}

int countCoinChange(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total) {
    if (nums.empty()) {
        return -1;
    }

    int result = countCoinChangeRecursive(nums, total, 0);
    return result == INT_MIN ? -1 : result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;2^(N+T)&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N + T&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up-4&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;./5-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int countCoinChange3(const vector&amp;lt;int&amp;gt; &amp;amp;nums, int total) {
    if (nums.empty()) {
        return -1;
    }
    if (total == 0) {
        return 0;
    }
    int n = nums.size();
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(n, vector&amp;lt;int&amp;gt;(total + 1));

    for (int i = 0; i &amp;lt; n; i++) {
        dp[i][0] = 0;
    }
    //只有nums[0]时，最小个数为t/nums[0];
    for (int t = 1; t &amp;lt;= total; t++) {
        dp[0][t] = (t % nums[0] == 0 ? t / nums[0] : INT_MIN);
    }

    for (int i = 1; i &amp;lt; n; i++) {
        for (int t = 1; t &amp;lt;= total; t++) {
            dp[i][t] = dp[i - 1][t];
            //选中
            if (nums[i] &amp;lt;= t) {
                if (dp[i][t - nums[i]] != INT_MIN) {
                    dp[i][t] = max(dp[i - 1][t], 1 + dp[i][t - nums[i]]);
                }
            }

        }
    }

    return (dp[n - 1][total] == INT_MIN) ? -1 : dp[n - 1][total];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N * T&lt;/em&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
