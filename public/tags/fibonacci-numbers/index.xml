<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fibonacci Numbers | 细胞的核</title>
    <link>/tags/fibonacci-numbers/</link>
      <atom:link href="/tags/fibonacci-numbers/index.xml" rel="self" type="application/rss+xml" />
    <description>Fibonacci Numbers</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 01 Jul 2020 16:35:01 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Fibonacci Numbers</title>
      <link>/tags/fibonacci-numbers/</link>
    </image>
    
    <item>
      <title>Dynamic Programming-4 Fibonacci Numbers</title>
      <link>/code/dynamic-progamming/4-fibonacci-numbers/</link>
      <pubDate>Wed, 01 Jul 2020 16:35:01 +0800</pubDate>
      <guid>/code/dynamic-progamming/4-fibonacci-numbers/</guid>
      <description>

&lt;h2 id=&#34;1-fibonacci-numbers&#34;&gt;1. fibonacci numbers&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;斐波那契数列&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;brute-force&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int fib(int n) {
    if (n &amp;lt; 2) {
        return n;
    }

    return fib(n - 1) + fib(n - 2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;2^N&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;top-down&#34;&gt;Top-down&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
int fibRecursive(vector&amp;lt;int&amp;gt; &amp;amp;memoize, int n) {
    if (n &amp;lt; 2) return n;

    if (memoize[n] == -1) {
        memoize[n] = fibRecursive(memoize, n - 1) + fibRecursive(memoize, n - 2);
        return memoize[n];
    }

    return memoize[n];
}

int fib2(int n) {
    vector&amp;lt;int&amp;gt; memoize(n + 1, -1);
    return fibRecursive(memoize, n );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int fib3(int n) {
    if (n == 0) return 0;
    vector&amp;lt;int&amp;gt; dp(n + 1);
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i &amp;lt;= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }

    return dp[n];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h2 id=&#34;2-staircase&#34;&gt;2. staircase&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;n阶台阶，每次只允许走1步、2步或3步，求有多少种方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;intput:	n=3
    
output:	4
    
explanation:{1,1,1},{1,2},{2,1},{3}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;intput:	n=4
    
output:	7
    
explanation:{1,1,1,1},{1,2,1},{2,1,1},{1,1,2},{3,1},{1,3},{2,2}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brute-force-1&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int staircase(int n) {
    //可以往后推到n=3,结果：4
    if (n == 0) {
        return 1;
    }
    if (n == 1) {
        return 1;
    }
    if (n == 2) {
        return 2;
    }
    return staircase(n - 1) + staircase(n - 2) + staircase(n - 3);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;3^N&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;top-down-1&#34;&gt;Top-down&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int staircaseRecursive2(vector&amp;lt;int&amp;gt; &amp;amp;dp, int n) {
    if (n == 0) {
        return 1;
    }
    if (n == 1) {
        return 1;
    }
    if (n == 2) {
        return 2;
    }
    if (dp[n] == -1) {
        dp[n] = staircaseRecursive2(dp, n - 1) + staircaseRecursive2(dp, n - 2) + staircaseRecursive2(dp, n - 3);;
        return dp[n];
    }

    return dp[n];
}

int staircase2(int n) {
    vector&amp;lt;int&amp;gt; dp(n + 1, -1);
    return staircaseRecursive2(dp, n);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up-1&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int staircase3(int n) {
    vector&amp;lt;int&amp;gt; dp(n + 1);
    dp[0] = 1;
    dp[1] = 1;
    dp[2] = 2;
    for (int i = 3; i &amp;lt;= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
    }

    return dp[n];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h2 id=&#34;3-number-factor&#34;&gt;3. number factor&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;给定n,求有多少方式使得n等于{1,3,4}的和&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;intput:	n=4
    
output:	4
    
explanation:{1,1,1,1},{1,3},{4},{3,1}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;intput:	n=5
    
output:	6
    
explanation:{1,1,1,1,1},{1,1,3},{4,1},{1,4},{1,3,1},{3,1,1}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brute-force-2&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int fib(int n) {
    if (n == 0) {
        return 1;
    }
    if (n == 1) {
        return 1;
    }
    if (n == 2) {
        return 1;
    }
    if (n == 3) {
        return 2;
    }
    return fib(n - 1) + fib(n - 3) + fib(n - 4);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;3^N&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;top-down-2&#34;&gt;Top-down&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
int fibRecursive(vector&amp;lt;int&amp;gt; &amp;amp;dp, int n) {
    if (n == 0) {
        return 1;
    }
    if (n == 1) {
        return 1;
    }
    if (n == 2) {
        return 1;
    }
    if (n == 3) {
        return 2;
    }
    if (dp[n] == -1) {
        dp[n] = fibRecursive(dp, n - 1) + fibRecursive(dp, n - 3) + fibRecursive(dp, n - 4);
        return dp[n];
    }

    return dp[n];
}

int fib2(int n) {
    vector&amp;lt;int&amp;gt; dp(n + 1, -1);
    return fibRecursive(dp, n);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up-2&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;./3-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int fib3(int n) {
    vector&amp;lt;int&amp;gt; dp(n + 1);
    dp[0] = 1;
    dp[1] = 1;
    dp[2] = 1;
    dp[3] = 2;
    for (int i = 4; i &amp;lt;= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 3] + dp[i - 4];
    }

    return dp[n];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h2 id=&#34;4-minimum-jumps-to-reach-the-end&#34;&gt;4. minimum jumps to reach the end&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;给定一组整数（&amp;gt;=0）,每个数代表可以往右跳的最大步数，求最小跳几次到达数组最后&lt;/p&gt;

&lt;p&gt;元素为0时，不能跳&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	[2, 1, 1, 1, 4]

output:	3
    
explanation:0-index(2) -&amp;gt; 2-index(1) -&amp;gt; 3-index(1) -&amp;gt; 4-index
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	[ 1,1, 3, 6, 9, 3, 0, 1, 3]

output:	4
    
explanation:0-index(1) -&amp;gt; 1-index(1) -&amp;gt; 2-index(1) -&amp;gt; 3-index(6)-&amp;gt;8-index
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brute-force-3&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int countMinJumpsRecursive(const vector&amp;lt;int&amp;gt; &amp;amp;jumps, int currentIndex) {
    if (currentIndex == jumps.size() - 1) {
        return 0;
    }

    if (jumps[currentIndex] == 0) {
        return INT_MAX;
    }

    int totalJumps = INT_MAX;
    int start = currentIndex + 1;
    int end = currentIndex + jumps[currentIndex];

    while (start &amp;lt; jumps.size() &amp;amp;&amp;amp; start &amp;lt;= end) {
        int minJumps = countMinJumpsRecursive(jumps, start);
        start++;
        if (minJumps != INT_MAX) {
            totalJumps = min(totalJumps, minJumps + 1);
        }
    }
    return totalJumps;
}

int countJumps(const vector&amp;lt;int&amp;gt; &amp;amp;jumps) {
    return countMinJumpsRecursive(jumps, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;2^N&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;top-down-3&#34;&gt;Top-down&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int countMinJumpsRecursive2(const vector&amp;lt;int&amp;gt; &amp;amp;jumps, int currentIndex, vector&amp;lt;int&amp;gt; &amp;amp;dp) {
    if (currentIndex == jumps.size() - 1) {
        return 0;
    }

    if (jumps[currentIndex] == 0) {
        return INT_MAX;
    }

    if (dp[currentIndex] == INT_MAX) {
        int totalJumps = INT_MAX;
        int start = currentIndex + 1;
        int end = currentIndex + jumps[currentIndex];

        while (start &amp;lt; jumps.size() &amp;amp;&amp;amp; start &amp;lt;= end) {
            int minJumps = countMinJumpsRecursive2(jumps, start, dp);
            start++;
            if (minJumps != INT_MAX) {
                totalJumps = min(totalJumps, minJumps + 1);
            }
        }
        dp[currentIndex] = totalJumps;
    }

    return dp[currentIndex];
}

int countJumps2(const vector&amp;lt;int&amp;gt; &amp;amp;jumps) {
    vector&amp;lt;int&amp;gt; dp(jumps.size(), INT_MAX);
    return countMinJumpsRecursive2(jumps, 0, dp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N^2&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up-3&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;./4-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//dp[currenIndex]代表以当前位置为起点到达终点的最小跳
int countJumps3(const vector&amp;lt;int&amp;gt; &amp;amp;jumps) {
    vector&amp;lt;int&amp;gt; dp(jumps.size());

    //除了jumps[0]都为INT_MAX
    for (int i = 1; i &amp;lt; jumps.size(); i++) {
        dp[i] = INT_MAX;
    }

    for (int start = 0; start &amp;lt; jumps.size() - 1; start++) {
        for (int end = start + 1; end &amp;lt;= start + jumps[start] &amp;amp;&amp;amp; end &amp;lt; jumps.size(); end++) {
            //dp[start]到达 其能达到 的范围内的跳数  等于dp[start]+1
            //比较这俩值
            dp[end] = min(dp[end], dp[start] + 1);
        }
    }

    return dp[jumps.size() - 1];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N^2&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h2 id=&#34;5-minimum-jumps-with-fee&#34;&gt;5. minimum jumps with fee&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;给定N，代表n步台阶，N个元素的数组代表上某一台阶的花费，你每次可以走1,2,3步，求最小花费到达终点&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;input:	n=6, fee:[1,2,5,2,1,2]

output:	3
    
explanation:0-index(1)-&amp;gt;3-index(2)-&amp;gt;top ,1+2=3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	n=4, fee:[2,3,4,5]

output:	5
    
explanation:0-index(2)-&amp;gt;1-index(3)-&amp;gt;top ,2+3=5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brute-force-4&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int minFeeRecursive(const vector&amp;lt;int&amp;gt; &amp;amp;fees, int currentIndex) {
    if (currentIndex &amp;gt;= fees.size()) {
        return 0;
    }

    int partFee1 = minFeeRecursive(fees, currentIndex + 1);
    int partFee2 = minFeeRecursive(fees, currentIndex + 2);
    int partFee3 = minFeeRecursive(fees, currentIndex + 3);

    return min(partFee1, min(partFee2, partFee3))+ fees[currentIndex];
}

int minFee(const vector&amp;lt;int&amp;gt; &amp;amp;fees) {
    return minFeeRecursive(fees, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;3^N&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;top-down-4&#34;&gt;Top-down&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int minFeeRecursive2(const vector&amp;lt;int&amp;gt; &amp;amp;fees, int currentIndex, vector&amp;lt;int&amp;gt; dp) {
    if (currentIndex &amp;gt;= fees.size()) {
        return 0;
    }

    if (dp[currentIndex] == -1) {
        int partFee1 = minFeeRecursive2(fees, currentIndex + 1, dp);
        int partFee2 = minFeeRecursive2(fees, currentIndex + 2, dp);
        int partFee3 = minFeeRecursive2(fees, currentIndex + 3, dp);

        dp[currentIndex] = min(partFee1, min(partFee2, partFee3)) + fees[currentIndex];
    }

    return dp[currentIndex];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up-4&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int minFee3(const vector&amp;lt;int&amp;gt; &amp;amp;fees) {
    //dp[n]代表，n阶台阶时，最小费用
    vector&amp;lt;int&amp;gt; dp(fees.size() + 1);

    //n=0,时不需要，n=1或2时，只需fees[0]
    dp[0] = 0;
    dp[1] = fees[0];
    dp[2] = fees[0];

    //i,i-1,i-2阶台阶可直接到i+1阶台阶
    for (int i = 2; i &amp;lt; fees.size(); i++) {
        dp[i + 1] = min(fees[i] + dp[i], min(fees[i - 1] + dp[i - 1], fees[i - 2] + dp[i - 2]));
    }
    return dp[fees.size()];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h2 id=&#34;6-house-thief&#34;&gt;6. house thief&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;小偷偷房子，n元数组代表n个房子的财富，小偷不能偷连续2个房子，求能偷到的最大财富&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	[2,5,1,3,6,2,4]

output:	15
    
expalanation:5 + 6 + 4 = 15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;input:	[2, 10, 14, 8, 1]

output:	18
    
expalanation:10 + 8 = 18
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brute-force-5&#34;&gt;Brute-force&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int maxWealthRecursive(const vector&amp;lt;int&amp;gt; &amp;amp;wealth, int currentIndex) {
    if (currentIndex &amp;gt;= wealth.size()) {
        return 0;
    }

    int part1wealth = maxWealthRecursive(wealth, currentIndex + 2) + wealth[currentIndex];
    int part2wealth = maxWealthRecursive(wealth, currentIndex + 1);

    return max(part1wealth, part2wealth);
}

int maxWealth(const vector&amp;lt;int&amp;gt; &amp;amp;wealth) {
    return maxWealthRecursive(wealth, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;2^N&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;top-down-5&#34;&gt;Top-down&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int maxWealthRecursive2(const vector&amp;lt;int&amp;gt; &amp;amp;wealth, int currentIndex, vector&amp;lt;int&amp;gt; dp) {
    if (currentIndex &amp;gt;= wealth.size()) {
        return 0;
    }

    if (dp[currentIndex] == -1) {
        int part1wealth = maxWealthRecursive2(wealth, currentIndex + 2, dp) + wealth[currentIndex];
        int part2wealth = maxWealthRecursive2(wealth, currentIndex + 1, dp);
        dp[currentIndex] = max(part1wealth, part2wealth);
    }

    return dp[currentIndex];
}

int maxWealth2(const vector&amp;lt;int&amp;gt; &amp;amp;wealth) {
    vector&amp;lt;int&amp;gt; dp(wealth.size() + 1, -1);
    return maxWealthRecursive2(wealth, 0, dp);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&#34;bottom-up-5&#34;&gt;Bottom-up&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int maxWealth3(const vector&amp;lt;int&amp;gt; &amp;amp;wealth) {
    //dp[n],当物品为n时最大财富
    vector&amp;lt;int&amp;gt; dp(wealth.size() + 1);
    dp[0] = 0;
    dp[1] = wealth[0];
//    dp[2]=max(wealth[0],wealth[1]);
    for (int i = 1; i &amp;lt; wealth.size(); i++) {
        //dp[i]:不偷；
        //dp[i-1]+wealth[i]:偷 i-1个物品最大值，加上第i+1个物品的价值
        dp[i + 1] = max(dp[i], dp[i - 1] + wealth[i]);
    }
    return dp[wealth.size()];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Space Complexity : &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
